<SELECT FUNCTION>

SELECT state FROM state_abbreviation
SELECT * FROM state_abbreviation
SELECT * FROM Reli11000
SELECT * FROM Reli11000
SELECT B FROM TestTable1
SELECT name FROM test_table


<WHERE>

SELECT state FROM state_abbreviation WHERE state = 'Alaska'
SELECT B FROM TestTable1 WHERE B = 'Data1_3'


<AND>

SELECT * FROM state_population WHERE state_code = 'AK' AND year = '2018'

<OR>

SELECT state FROM state_abbreviation WHERE state = 'California' OR state = 'Texas'

SELECT * FROM state_abbreviation WHERE state = 'California' OR state = 'Texas'

<MAX, MIN, SUM, AVG, COUNT>  
SELECT MAX(monthly_state_population) FROM state_population
SELECT MIN(monthly_state_population) FROM state_population
SELECT SUM(monthly_state_population) FROM state_population
SELECT AVG(monthly_state_population) FROM state_population
SELECT COUNT(monthly_state_population) FROM state_population

<GROUP BY> - Debug

SELECT state_code, AVG(monthly_state_population) FROM state_population GROUP BY state_code 
SELECT state_code, SUM(monthly_state_population) FROM state_population GROUP BY state_code 
SELECT state_code, COUNT(monthly_state_population) FROM state_population GROUP BY state_code 

SELECT state_code, AVG(monthly_state_population) AS average_population FROM state_population GROUP BY state_code

<HAVING> - Debug
SELECT state_code, COUNT(monthly_state_population) AS FROM state_population GROUP BY state_code HAVING COUNT(monthly_state_population) > 4;

SELECT state_code, COUNT(monthly_state_population) AS count_population FROM state_population GROUP BY state_code HAVING count_population > 4;


<JOIN> 

SELECT a.state_code, b.state FROM state_population AS a JOIN state_abbreviation AS b ON a.state_code = b.state_code
SELECT a.state_code, b.state FROM state_population AS a INNER JOIN state_abbreviation AS b ON a.state_code = b.state_code
SELECT t1.A, t2.A, t2.B FROM TestTable1 AS t1 INNER JOIN TestTable2 AS t2 ON t1.A = t2.A
SELECT t1.A, t2.A, t2.B FROM TestTable1 AS t1 LEFT JOIN TestTable2 AS t2 ON t1.A = t2.A
SELECT t1.A, t2.A, t2.B FROM TestTable1 AS t1 RIGHT JOIN TestTable2 AS t2 ON t1.A = t2.A
SELECT t1.A, t2.A, t2.B FROM TestTable1 AS t1 JOIN TestTable2 AS t2 ON t1.A = t2.A

SELECT t1.A, t2.A, t2.B FROM Reli110000 AS t1 JOIN Relii10000 AS t2 ON t1.A = t2.A
SELECT t1.A, t2.A, t2.B FROM Reli11000 AS t1 JOIN Relii1000 AS t2 ON t1.A = t2.A


<ORDER BY>

SELECT state_code, monthly_state_population FROM state_population ORDER BY monthly_state_population DESC

SELECT state_code, monthly_state_population FROM state_population ORDER BY monthly_state_population ASC


<comparison operators >
SELECT A, B FROM TestTable1 WHERE A = 5 
SELECT A, B FROM TestTable1 WHERE A != 5 
SELECT A, B FROM TestTable1 WHERE A > 5
SELECT A, B FROM TestTable1 WHERE A < 5
SELECT A, B FROM TestTable1 WHERE A BETWEEN 3 AND 5
SELECT A, B FROM TestTable1 WHERE A LIKE '1%'
SELECT A, B FROM TestTable1 WHERE A IN (2,3,4)

<HAVING> - NOT DONE

SELECT state_code, COUNT(monthly_state_population) AS total_population FROM state_population GROUP BY state_code HAVING total_population > 10; 


<CREATE>

CREATE TABLE employees (employee_id INT PRIMARY KEY, name VARCHAR(20), salary INT);

<INSERT: successful>
INSERT INTO test_table (id, name) VALUES (21, 'Ellen');

<INSERT: fail due to primary key confliction>
INSERT INTO test_table (id, name) VALUES (21, 'Ellen');

<successful>
INSERT INTO employees (employee_id, name, salary) VALUES (21, 'Ellen', 253789);

<INSERT: fail due to datatype confliction>
INSERT INTO test_table (id, name) VALUES ('WRONG','Ellen');

<UPDATE: successful>
UPDATE test_table SET name = 'DemoUpdate' WHERE id = 21; 

<DELETE>
DELETE FROM test_table WHERE id = 21;

<UPDATE: fail due to invalid datatype>
UPDATE test_table SET id = 'test' WHERE name = DemoUpdate;

<DELETE>

DELETE FROM test_table WHERE id = 21; 

<INDEX>
CREATE INDEX index_id ON TestTable1 (B);
DROP INDEX index_id ON TestTable1; 